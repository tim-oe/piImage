// generic task to run ansible playbook
tasks.register('playbook') {
    group = "ansible"
    doLast {
    }
    if (project.hasProperty('ansible_playbook')) {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    "${ansible_playbook}"
        }
    } else {
        println "need to set -ansible_playbook=[src relative path to playbook.yml file]"
    }
}

tasks.register('aptUpdate', GradleBuild) {
    description = 'run ansible apt update script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/common/apt-update.yml']
    tasks = ['playbook']
}

tasks.register('ntpClient', GradleBuild) {
    description = 'run ansible ntp client script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/common/ntp-client.yml']
    tasks = ['playbook']
}

tasks.register('timesyncd', GradleBuild) {
    description = 'deploy ansible ntp timesyncd script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/common/nm-timesyncd.yml']
    tasks = ['playbook']
}

tasks.register('telegraf', GradleBuild) {
    description = 'run ansible telegraf script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/common/telegraf.yml']
    tasks = ['playbook']
}

tasks.register('influx', GradleBuild) {
    description = 'run ansible influx script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/mgr/influx.yml']
    tasks = ['playbook']
}

tasks.register('certbot', GradleBuild) {
    description = 'run ansible certbot script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/mgr/certbot.yml']
    tasks = ['playbook']
}

tasks.register('piUpdate') {
    description = 'run ansible apt update script on pi instances'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-l pi_all ' +
                    'src/ansible/common/apt-update.yml'
        }
    }
}

tasks.register('aptPurge') {
    description = 'run ansible apt purge script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/pi/apt-purge.yml'
        }
    }
}

tasks.register('brutoof') {
    description = 'run ansible disable onboard brutoof script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/pi/brutoof-disable.yml'
        }
    }
}

tasks.register('wifi') {
    description = 'run ansible disable onboard wifi script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/pi/wifi-disable.yml'
        }
    }
}

tasks.register('clones') {
    description = 'run ansible clones mount script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/common/clones-mnt.yml'
        }
    }
}

tasks.register('console') {
    description = 'run ansible console resize script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/pi/console-resize.yml'
        }
    }
}

tasks.register('ssh') {
    description = 'run ansible ssh lockdown script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/common/ssh-lockdown.yml'
        }
    }
}

tasks.register('swap') {
    description = 'run ansible swap script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/pi/swap.yml'
        }
    }
}

tasks.register('log2ram') {
    description = 'run ansible log2ram script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/common/log2ram.yml'
        }
    }
}

tasks.register('jimmies') {
    description = 'run ansible ansible script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/common/jimmies.yml'
        }
    }
}

tasks.register('ansible') {
    description = 'run ansible ansible script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/mgr/ansible.yml'
        }
    }
}

tasks.register('terraform') {
    description = 'run ansible terraform script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/mgr/terraform.yml'
        }
    }
}

tasks.register('helm') {
    description = 'run ansible helm script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/mgr/helm.yml'
        }
    }
}

tasks.register('java') {
    description = 'run ansible java script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/mgr/java.yml'
        }
    }
}

tasks.register('uptronics') {
    description = 'run ansible uptronics script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/timesrvr/uptronics.yml'
        }
    }
}

tasks.register('adafruit') {
    description = 'run ansible adafruit script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/timesrvr/adafruit.yml'
        }
    }
}

tasks.register('adafruitUsb0') {
    description = 'run ansible adafruit script for usb'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/timesrvr/adafruit.yml ' +
                    '-e \'{"gps_dev":"ttyUSB0"}\''
        }
    }
}

tasks.register('ntpShm') {
    description = 'run ansible gpsd script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/timesrvr/ntp.yml ' +
                    '-e \'{"use_shm":true}\''
        }
    }
}

tasks.register('virtbox') {
    description = 'run ansible virtualbox script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/apps/virtbox.yml'
        }
    }
}

tasks.register('chrome') {
    description = 'run ansible chrome script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/apps/chrome.yml'
        }
    }
}

tasks.register('dbeaver') {
    description = 'run ansible dbeaver script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/apps/dbeaver.yml'
        }
    }
}

tasks.register('libreoffice') {
    description = 'run ansible libreoffice script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/apps/libreoffice.yml'
        }
    }
}

tasks.register('pritunl') {
    description = 'run ansible pritunl script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/laptop/work/prit.yml'
        }
    }
}

tasks.register('shutter') {
    description = 'run ansible shutter script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/apps/shutter.yml'
        }
    }
}

tasks.register('ltPrinter') {
    description = 'run ansible laptop printer script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/laptop/printer.yml'
        }
    }
}

tasks.register('dtInit') {
    description = 'run ansible desktop init script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/desktop/desktop-init.yml'
        }
    }
}

tasks.register('docker') {
    description = 'run ansible docker script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/apps/docker.yml'
        }
    }
}

tasks.register('pidocker') {
    description = 'run ansible docker script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/pi/docker.yml'
        }
    }
}

tasks.register('gpsd') {
    description = 'run ansible gpsd script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/apps/gpsd.yml'
        }
    }
}

tasks.register('motd') {
    description = 'run ansible motd script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/pi/motd.yml'
        }
    }
}

tasks.register('xrdp') {
    description = 'run ansible xrdp script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/apps/xrdp.yml'
        }
    }
}

tasks.register('wine') {
    description = 'run ansible wine script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/apps/wine.yml'
        }
    }
}

/** 
 * can't nest GradleBuild tasks so use dependsOn to group
 * to call multiple GradleBuild tasks each thas has to have a unique buildName
 * https://github.com/azlux/log2ram
 */
tasks.register('piInit') {
    description = 'run mutiple ansible playbooks for system intialization'
    group = "ansible"
    dependsOn 'aptPurge'
    dependsOn 'brutoof'
    dependsOn 'clones'
    dependsOn 'console'
    dependsOn 'ssh'
    dependsOn 'swap'
    dependsOn 'log2ram'
}

tasks.register('piAptUpdate') {
    description = 'run ansible apt update script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-l pi-all ' +
                    'src/ansible/common/apt-update.yml'
        }
    }
}

tasks.register('sdr') {
    description = 'run ansible apt sdr script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/weather/nesdr.yml'
        }
    }
}

tasks.register('wPython') {
    description = 'run ansible apt weather python script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/weather/python.yml'
        }
    }
}

tasks.register('mysql') {
    description = 'run ansible apt weather python script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/apps/mysql.yml'
                    "-e '{\"root_pwd\":\"${mysql_root_pwd}\"}'"
        }
    }
}

tasks.register('encrypt') {
    description = 'encrypt key value with ansible vault'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-vault encrypt_string ' +
                    "${ans_val} " +
                    '--name ' +
                    "${ans_prop} " 
        }
    }
}
