// generic task to run ansible playbook
tasks.register('playbook') {
    group = "ansible"
    doLast {
    }
    if (project.hasProperty('ansible_playbook')) {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    "${ansible_playbook}"
        }
    } else {
        println "need to set -ansible_playbook=[src relative path to playbook.yml file]"
    }
}

tasks.register('aptUpdate', GradleBuild) {
    description = 'run ansible apt update script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/common/apt-update.yml']
    tasks = ['playbook']
}

tasks.register('logClean', GradleBuild) {
    description = 'run ansible log clean script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/common/log-clean.yml']
    tasks = ['playbook']
}

tasks.register('ntpClient', GradleBuild) {
    description = 'run ansible ntp client script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/common/ntp-client.yml']
    tasks = ['playbook']
}

tasks.register('timesyncd', GradleBuild) {
    description = 'deploy ansible ntp timesyncd script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/common/nm-timesyncd.yml']
    tasks = ['playbook']
}

tasks.register('telegraf', GradleBuild) {
    description = 'run ansible telegraf script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/common/telegraf.yml']
    tasks = ['playbook']
}

tasks.register('influx', GradleBuild) {
    description = 'run ansible influx script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/mgr/influx.yml']
    tasks = ['playbook']
}

tasks.register('certbot', GradleBuild) {
    description = 'run ansible certbot script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/mgr/certbot.yml']
    tasks = ['playbook']
}

tasks.register('sonar-scanner', GradleBuild) {
    description = 'run ansible sonar-scanner script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/dev/sonar-scanner.yml']
    tasks = ['playbook']
}

tasks.register('wifi', GradleBuild) {
    description = 'run ansible wifi script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/pi/wifi-disable.yml']
    tasks = ['playbook']
}

tasks.register('ansible', GradleBuild) {
    description = 'run ansible ansible script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/mgr/ansible.yml']
    tasks = ['playbook']
}

tasks.register('terraform', GradleBuild) {
    description = 'run ansible terraform script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/mgr/terraform.yml']
    tasks = ['playbook']
}

tasks.register('kompose', GradleBuild) {
    description = 'run ansible kompose script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/mgr/kompose.yml']
    tasks = ['playbook']
}

tasks.register('helm', GradleBuild) {
    description = 'run ansible helm script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/mgr/helm.yml']
    tasks = ['playbook']
}

tasks.register('uptronics', GradleBuild) {
    description = 'run ansible uptronics script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/timesrvr/uptronics.yml']
    tasks = ['playbook']
}

tasks.register('adafruit', GradleBuild) {
    description = 'run ansible adafruit script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/timesrvr/adafruit.yml']
    tasks = ['playbook']
}

tasks.register('virtbox', GradleBuild) {
    description = 'run ansible virtbox script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/apps/virtbox.yml']
    tasks = ['playbook']
}

tasks.register('chrome', GradleBuild) {
    description = 'run ansible chrome script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/apps/virtbox.yml']
    tasks = ['playbook']
}

tasks.register('dbeaver', GradleBuild) {
    description = 'run ansible dbeaver script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/apps/dbeaver.yml']
    tasks = ['playbook']
}

tasks.register('libreoffice', GradleBuild) {
    description = 'run ansible libreoffice script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/apps/libreoffice.yml']
    tasks = ['playbook']
}

tasks.register('pritunl', GradleBuild) {
    description = 'run ansible pritunl script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/laptop/work/prit.yml']
    tasks = ['playbook']
}

tasks.register('shutter', GradleBuild) {
    description = 'run ansible shutter script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/apps/shutter.yml']
    tasks = ['playbook']
}

tasks.register('ltPrinter', GradleBuild) {
    description = 'run ansible brother printer script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/laptop/printer.yml']
    tasks = ['playbook']
}

tasks.register('dtInit', GradleBuild) {
    description = 'run ansible desktop init script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/desktop/desktop-init.yml']
    tasks = ['playbook']
}

tasks.register('docker', GradleBuild) {
    description = 'run ansible docker script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/apps/docker.yml']
    tasks = ['playbook']
}

tasks.register('pidocker', GradleBuild) {
    description = 'run ansible pi docker script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/pi/docker.yml']
    tasks = ['playbook']
}

tasks.register('gpsd', GradleBuild) {
    description = 'run ansible gpsd script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/apps/gpsd.yml']
    tasks = ['playbook']
}

tasks.register('motd', GradleBuild) {
    description = 'run ansible motd script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/pi/motd.yml']
    tasks = ['playbook']
}

tasks.register('xrdp', GradleBuild) {
    description = 'run ansible xrdp script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/apps/xrdp.yml']
    tasks = ['playbook']
}

tasks.register('wine', GradleBuild) {
    description = 'run ansible wine script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/apps/wine.yml']
    tasks = ['playbook']
}

tasks.register('sdr', GradleBuild) {
    description = 'run ansible sdr script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/weather/nesdr.yml']
    tasks = ['playbook']
}

tasks.register('wPython', GradleBuild) {
    description = 'run ansible wPython script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/weather/python.yml']
    tasks = ['playbook']
}

tasks.register('openvpn', GradleBuild) {
    description = 'run ansible openvpn script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/laptop/openvpn.yml']
    tasks = ['playbook']
}

tasks.register('gdrive', GradleBuild) {
    description = 'run ansible gdrive script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/apps/gdrive.yml']
    tasks = ['playbook']
}

tasks.register('rclone', GradleBuild) {
    description = 'run ansible rclone script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/desktop/rclone.yml']
    tasks = ['playbook']
}

tasks.register('tfk8s', GradleBuild) {
    description = 'run ansible tfk8s script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/mgr/tfk8s.yml']
    tasks = ['playbook']
}

tasks.register('ai', GradleBuild) {
    description = 'run ansible ai script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/pi/ai/ai.yml']
    tasks = ['playbook']
}

tasks.register('aiCamera', GradleBuild) {
    description = 'run ansible ai camera script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/pi/ai/camera.yml']
    tasks = ['playbook']
}

tasks.register('aiPython', GradleBuild) {
    description = 'run ansible ai python script'
    group = "ansible"
    startParameter.projectProperties = ['ansible_playbook':'src/ansible/pi/ai/python.yml']
    tasks = ['playbook']
}

tasks.register('adafruitUsb0') {
    description = 'run ansible adafruit script for usb'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/timesrvr/adafruit.yml ' +
                    '-e \'{"gps_dev":"ttyUSB0"}\''
        }
    }
}

tasks.register('ntpShm') {
    description = 'run ansible gpsd script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/timesrvr/ntp.yml ' +
                    '-e \'{"use_shm":true}\''
        }
    }
}

tasks.register('mysql') {
    description = 'run ansible apt weather python script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/apps/mysql.yml'
                    "-e '{\"root_pwd\":\"${mysql_root_pwd}\"}'"
        }
    }
}

tasks.register('encrypt') {
    description = 'encrypt key value with ansible vault'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-vault encrypt_string ' +
                    "${ans_val} " +
                    '--name ' +
                    "${ans_prop} " 
        }
    }
}

tasks.register('piUpdate') {
    description = 'run ansible apt update script on pi instances'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-l pi_all ' +
                    'src/ansible/common/apt-update.yml'
        }
    }
}

tasks.register('aptPurge') {
    description = 'run ansible apt purge script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/pi/apt-purge.yml'
        }
    }
}

tasks.register('brutoof') {
    description = 'run ansible disable onboard brutoof script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/pi/brutoof-disable.yml'
        }
    }
}

tasks.register('clones') {
    description = 'run ansible clones mount script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/common/clones-mnt.yml'
        }
    }
}

tasks.register('console') {
    description = 'run ansible console resize script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/pi/console-resize.yml'
        }
    }
}

tasks.register('ssh') {
    description = 'run ansible ssh lockdown script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/common/ssh-lockdown.yml'
        }
    }
}

tasks.register('swap') {
    description = 'run ansible swap script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/pi/swap.yml'
        }
    }
}

tasks.register('log2ram') {
    description = 'run ansible log2ram script'
    group = "ansible"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'ansible-playbook ' +
                    '-i ' +
                    "${target_host}, " +
                    'src/ansible/pi/log2ram.yml'
        }
    }
}

/** 
 * can't nest or use depends so called tasks cannot be inherent 
 * to call multiple GradleBuild tasks each thas has to have a unique buildName
 * https://github.com/azlux/log2ram
 */
tasks.register('piInit') {
    description = 'run mutiple ansible playbooks for system intialization'
    group = "ansible"
    dependsOn 'aptPurge'
    dependsOn 'brutoof'
    dependsOn 'clones'
    dependsOn 'console'
    dependsOn 'ssh'
    dependsOn 'swap'
    dependsOn 'log2ram'
}
